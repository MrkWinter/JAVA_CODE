1 数组

数组也是数组类型 放入同类型的数据 为引用类型 数组就是一组数据

访问元素方式 arr[]

定义方式1 int[] arr = {}/new int[]     定义方式2 int arr[] = {}/new int[]

定义方式3  int[][] arr = {}/new int[][]   定义方式4 int[][] arr = {}/new int[][] 定义方式5 int[] arr[] = {}/new int[][] 

定义方式6 （少用） int arr[] = new int[]{1,2,3,4}; 相当于定义方式 int arr[] = {1,2,3,4}

可以通过数组名.length 得到数组的长度  如 arr.length 得到是数组arr中元素个数

动态初始化

使用方式1 int arr[] = new 数据类型[大小]

使用方式2 int arr[];（声明）  arr = new int[大小] 

静态初始化

使用方式 数据类型 数组名[] = {}; 应用于知道初始值直接赋值的情况 较简洁



2.数组细节

数组中存放的数据类型要相同或者可以自动类型转换 - 所有类型要匹配

数组创建后无赋值有默认值 默认值如下

byte short int long 都是0  double float 为0.0   boolean 为false  String 为NULL
char为 \u0000

数组属于引用类型 数组型数据是对象 



3.数组赋值机制

基本数据类型赋值方式 值传递值拷贝

数组赋值机制  引用传递 地址传递

jvm区内存 分为 栈 堆 方法区

基本数据类型开辟的内存放在栈区  

基本数据类型赋值时新开辟空间存放拷贝的值

数组开辟后在栈区储存一个地址  地址指向堆区 数组元素存储在堆区中

数组赋值时是在栈区中从新开辟空间存储地址



4.数组元素添加 （删除） -- 扩容和缩减

细节：java中空为null   定义开辟内存 java数组  无指针指向的内存会自动回收 数组动态初始化应用于无确定的数组元素值的情况

操作 从新定义一个动态初始化数组 再把原数组元素拷贝进去 最后使原数组名指向新数组 旧数组的内存因无指针指向 内存自动回收

缩减操作同上 只是重新定义的数据元素个数变小1



5 排序

分为内部排序和外部排序

冒泡排序算法思想



6.查找

字符串比较方法

字符串1.equals（字符串2） 若字符串1 ==  字符串2 则返回值为真 否则为假



7.二维数组

二维数组是一维数组的套娃 

arr[][] = {{1,2},{3,4},{5,6}};
二维数组的长度为 arr.length （将每个一维数组当成一个元素）
每个一维数组的长度为 arr[i].length  （i -> 0~2）



8.二维数组的使用

动态初始化
方式1 int arr[][] = new int[3][4]；
方式2 int arr[][]; arr = new int[3][4];

方式3 定义列数不同的二维数组 ——  java动态初始化数组中二维数组可不定义列数 int arr[][] = new int[10][] c中必须定义列数

静态初始化
方式1 int arr[][] = {{1,2,3},{4,5,6},{7,8,9}};
方式2 义列数不同的二维数组——int arr[][] = {{1,2,3，}，{4,5,6}，{7}}；

二维数组[][] 中的可以是变量 如int arr[][] = new int[n][];

定义二维数组时 二维数组中存储的是一维数组的地址 

定义时 在栈区开辟一块内存 存储二维数组的地址 该地址指向堆区的存放一维数组地址的内存 

每个一维数组的地址指向在堆区的一块新的空间 新的空间存放的是一维数组的元素

9.其他细节

java生成随机数

引入 java.util.Mach 引入包中类

Math.random() * 100 + 1 生成1~100的随机数

解释 Math.random（） 是一个静态方法 可以生成0 ~ 1 的double型数据


import java.util.Random;
Random 是一个类 其中有一个方法可以生成随机数
Random r = new Random();
numc = r.nextInt(3)//返回0 ~2的随机数

c语言生成随机数 

srand（(unsigned int)time(NULL)）
rand() 
