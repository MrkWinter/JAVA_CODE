1.算数运算符

+ - * / % ++ -- 字符相加 +

a%b的本质  = a - a / b * b

i = ++i
i = i++

println 中的ln 是换行的意思

代码实现步骤

需求->分析->走代码

2.关系运算符

== != < > <= >=  instanceof（检查是否是类的对象）

 成立结果为boolean true 反之false 由关系运算符相连的称为关系表达式

3.逻辑运算符

最终结果也为boolean值

短路与 &&  短路或 || 取反 ！

逻辑与 & 逻辑或 | 逻辑异或^

a&b都成立才成立 与a&&b 不同的是 无论a是否成立 都会执行b
a|b一个不成立就不成立 与a||b不同的是 无论a是否成立 都会执行b

所以短路与与短路或效率更高

逻辑异或 两个 a ^ b  a和b真假值不同则为true 反之则为false

4.赋值运算符

 =  += -+ /= %=

使用复合运算符会进行类型转换

5.三元运算符

条件表达式 ？ 表达式1：表达式2

条件表达式为真返回1 反之返回2

表达式1和表达式2 要为赋值给接收变量的类型（或是可以自动转换的）

6.运算符优先级

只有单目运算符和赋值运算符是从右向左运算的

7.java 标识符命名规则和规范

规则

由二十六个字母 大小写 0~9 _和￥组成

开头不能是数字

不能使用关键字 但可以包含关键字

标识符区分大小写 长度不受限制

标识符中不能包含空格

规范

包名： 多个单词组成时 所有的字母都小写 如 abc.dfd.gdd

类名，接口名： 多单词组成时，所有的单词首字母大写 如TankShotGame[大驼峰]

变量名，方法名 ：多单词组成时 第一个单词首字母小写 第二个单词开始每个单词首字母大写 如xxxYyyZzz[小驼峰，简称驼峰法]

常量名: 所有字母都大写 多个单词时每个单词间用下划线连接 如XXX_YYY_ZZZ

包小写 类接口大驼峰 变量方法小驼峰 常量大写下滑线 

8.关键字和保留字

标识符不能使用

9.键盘输入语句

步骤：

引入包->使用类->用类创建一个对象 

Scanner类  在java.util 包中 

然后用对象使用方法

\t水平制表符 8格位置 若数据大于8格 则显示16格 也就是显示所占格数为8 的倍数

10.进制

对于整数有四种表达方式

二进制 以0b 或 0B 开头满2进1

八进制 以0 开头 满8进以1

十进制 满10进1

十六进制 以0x 开头 满16进1 a~f表示10~15

二进制 0b/0B 八进制 0 十进制 无 十六进制 0x

11.进制的转换

短除法求二进制 将该数不断除与二 直到商为0为值 再把每步得到的余数倒过来 就是对应的二进制

短除法求8进制

短除法求16进制

二/八/十六进制转十进制  （位数数值相加法）

十进制转二/八/十六进制 （短除法）

二进制转八/十六进制 （从低位开始每三/四位转换一位八进制数）

八/十六转换成二进制   (将八/十六进制每位转换成三/四位数字)

12.位运算符

>> 算数右移    <<算数左移   >>> 无符号右移（逻辑右移）

~按位取反   &按位与   |按位或     ^按位异或

算数右移： 低位溢出 符号符号位不变 并用符号位补溢出的高位 (除以二)

算数左移 ：符号位不变 低位补0 (乘以2)

>>> 逻辑右移： 低位溢出 高位补0

13.原 反 补 码

对于有符号数而言

二进制的最高位为符号位 0 表示正数 1表示负数

正数的原反补码相同 （三码合一）

负数的反码 = 它的符号位不变 其他位按位取反 

负数的补码 = 它的反码  +  1 负数的反码 = 负数的补码 - 1

0 的反码补码都为0

java 没有无符号数 换言之 java中的数都是有符号的 (无符号数:二进制全表正数 表示的数字在正数范围更多)

计算机在运行时都是以补码的方式来运算的

当我们看运算结构的时候，要看它的原码

~-2 = 1

a%b当a为小数时 公式为 a - a(int)/b * b 并且结果为近似值 这是规则 a取模时自动转换成int